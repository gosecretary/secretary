openapi: 3.0.0
info:
  title: Secretary API
  description: |
    Secretary is an open-source privileged access management (PAM) system that provides secure access to infrastructure resources.
    
    ## Features
    - User authentication and session management
    - Resource management with role-based access control
    - Access request workflow with approval process
    - Ephemeral credential generation
    - Session monitoring and recording
    - Comprehensive audit logging
    
    ## Authentication
    Most endpoints require authentication via session cookies. Login first to obtain a session cookie.
  version: 1.0.0
  contact:
    name: Secretary Project
    url: https://github.com/your-org/secretary
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:6080
    description: Development server
  - url: https://secretary.yourdomain.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Users
    description: User management operations
  - name: Resources
    description: Infrastructure resource management
  - name: Sessions
    description: Active session management and monitoring
  - name: Access Requests
    description: Access request workflow
  - name: Ephemeral Credentials
    description: Temporary credential generation
  - name: Health
    description: System health checks

paths:
  # Authentication endpoints
  /api/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account (authentication required)
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and create session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # User management endpoints
  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Users
      summary: Update user
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Resource management endpoints
  /api/resources:
    get:
      tags:
        - Resources
      summary: List all resources
      security:
        - SessionAuth: []
      responses:
        '200':
          description: Resources retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Resources
      summary: Create new resource
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRequest'
      responses:
        '200':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/resources/{id}:
    get:
      tags:
        - Resources
      summary: Get resource by ID
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Resource retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Resources
      summary: Update resource
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceRequest'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Resources
      summary: Delete resource
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Resource deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Session management endpoints
  /api/sessions:
    get:
      tags:
        - Sessions
      summary: List active sessions
      security:
        - SessionAuth: []
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/sessions/{id}:
    get:
      tags:
        - Sessions
      summary: Get session by ID
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/sessions/{id}/terminate:
    post:
      tags:
        - Sessions
      summary: Terminate session
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session terminated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Access request endpoints
  /api/access-requests:
    get:
      tags:
        - Access Requests
      summary: List pending access requests
      security:
        - SessionAuth: []
      responses:
        '200':
          description: Access requests retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Access Requests
      summary: Create access request
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessRequestRequest'
      responses:
        '200':
          description: Access request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/access-requests/{id}/approve:
    post:
      tags:
        - Access Requests
      summary: Approve access request
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveAccessRequestRequest'
      responses:
        '200':
          description: Access request approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/access-requests/{id}/deny:
    post:
      tags:
        - Access Requests
      summary: Deny access request
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DenyAccessRequestRequest'
      responses:
        '200':
          description: Access request denied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Ephemeral credentials endpoints
  /api/ephemeral-credentials:
    post:
      tags:
        - Ephemeral Credentials
      summary: Generate ephemeral credentials
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateEphemeralCredentialRequest'
      responses:
        '200':
          description: Ephemeral credentials generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/ephemeral-credentials/{id}:
    get:
      tags:
        - Ephemeral Credentials
      summary: Get ephemeral credential by ID
      security:
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Ephemeral credential retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Health check endpoint
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check system health status
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

components:
  securitySchemes:
    SessionAuth:
      type: apiKey
      in: cookie
      name: session_id
      description: Session-based authentication using HTTP cookies

  schemas:
    # Request schemas
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "SecurePassword123"
        name:
          type: string
          example: "John Doe"
        role:
          type: string
          enum: [user, admin, reviewer]
          default: user

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          format: password
          example: "SecurePassword123"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe Updated"
        email:
          type: string
          format: email
          example: "john.updated@example.com"
        password:
          type: string
          format: password
        role:
          type: string
          enum: [user, admin, reviewer]

    CreateResourceRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: "Production Database"
        description:
          type: string
          example: "Main production MySQL database"
        type:
          type: string
          enum: [mysql, postgresql, ssh, redis, mongodb]
          example: "mysql"

    UpdateResourceRequest:
      type: object
      properties:
        name:
          type: string
          example: "Updated Database Name"
        description:
          type: string
          example: "Updated description"
        type:
          type: string
          enum: [mysql, postgresql, ssh, redis, mongodb]

    CreateAccessRequestRequest:
      type: object
      required:
        - resource_id
        - reason
      properties:
        resource_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        reason:
          type: string
          example: "Need to debug production issue"
        duration:
          type: integer
          format: int64
          example: 3600000000000

    ApproveAccessRequestRequest:
      type: object
      properties:
        notes:
          type: string
          example: "Approved for emergency maintenance"
        expires_at:
          type: string
          format: date-time
          example: "2023-01-01T16:00:00Z"

    DenyAccessRequestRequest:
      type: object
      properties:
        notes:
          type: string
          example: "Insufficient justification provided"

    GenerateEphemeralCredentialRequest:
      type: object
      required:
        - resource_id
      properties:
        resource_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        duration:
          type: integer
          format: int64
          example: 3600000000000

    # Response schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          additionalProperties: true

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Bad request"
        data:
          type: object
          properties:
            error:
              type: string
              example: "Invalid input parameters"

  responses:
    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Not found - resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

security:
  - SessionAuth: [] 