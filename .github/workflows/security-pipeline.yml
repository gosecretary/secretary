# Secretary Security Scanning Pipeline
# This workflow performs comprehensive security analysis using our local security script

name: Secretary Security

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: '1.22'
  SECRETARY_VERSION: '1.0.0'

jobs:
  # Security Analysis using our local script
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Make security script executable
        run: chmod +x scripts/security-scan.sh

      - name: Run comprehensive security scan
        run: ./scripts/security-scan.sh --non-interactive --reports-dir security-reports

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: security-reports/
          retention-days: 30

      - name: Upload SARIF files to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: security-reports/gosec.sarif
          category: "gosec"

      - name: Upload golangci-lint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: security-reports/golangci-lint.sarif
          category: "golangci-lint"

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: security-reports/trivy-fs.sarif
          category: "trivy"

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = 'security-reports/security-report.md';
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: report
                });
              } else {
                console.log('Security report not found');
              }
            } catch (error) {
              console.log('Error reading security report:', error.message);
            }

  # CodeQL Analysis (using GitHub's built-in action)
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['go']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Test Execution
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run all tests
        run: go test -v ./...

      - name: Run security-specific tests
        run: |
          go test -v ./internal/validation/...
          go test -v ./internal/middleware/...
          go test -v ./internal/utils/...

      - name: Generate test coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage.out

  # Security Policy Compliance Check
  security-policy:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for required security files
        run: |
          echo "Checking security documentation..."
          test -f SECURITY.md && echo "✓ SECURITY.md found" || echo "✗ SECURITY.md missing"
          test -f SECURITY_FIXES.md && echo "✓ SECURITY_FIXES.md found" || echo "✗ SECURITY_FIXES.md missing"
          test -f .cursor/rules/secretary-project-standards.mdc && echo "✓ Security rules found" || echo "✗ Security rules missing"
          test -f .security/config.yml && echo "✓ Security config found" || echo "✗ Security config missing"

      - name: Validate security headers in code
        run: |
          echo "Checking for security headers in Go files..."
          grep -r "Security:" internal/ || echo "No security comments found"
          grep -r "TODO.*security" . || echo "No security TODOs found"

      - name: Check for hardcoded secrets
        run: |
          echo "Scanning for potential hardcoded secrets..."
          grep -r "password.*=.*\"" . --exclude-dir=.git --exclude-dir=vendor --exclude="*_test.go" || echo "No obvious hardcoded passwords found"
          grep -r "secret.*=.*\"" . --exclude-dir=.git --exclude-dir=vendor --exclude="*_test.go" || echo "No obvious hardcoded secrets found"

      - name: Check TLS configuration
        run: |
          echo "Checking TLS configuration..."
          grep -r "TLS" internal/config/ || echo "No TLS configuration found"
          grep -r "https" . --exclude-dir=.git || echo "No HTTPS references found"

  # Final Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-analysis, codeql-analysis, security-tests, security-policy]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: security-reports

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> security-summary.md
          echo "- Security Policy: ${{ needs.security-policy.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Next Steps" >> security-summary.md
          echo "1. Review any security findings in the GitHub Security tab" >> security-summary.md
          echo "2. Address high and critical severity issues" >> security-summary.md
          echo "3. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "4. Review and update security documentation as needed" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            }); 